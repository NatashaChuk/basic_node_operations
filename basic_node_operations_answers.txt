1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

   a) `sort` returns the file sorted alphabetically by line.

       $   sort commands.js
		                        break;
		                        break;
		                        commandLibrary.cat(userInputArray.slice(1));
		                        commandLibrary.echo(userInputArray.slice(1).join(" "));
		                        done(data);
		                        if (err) throw err;

		                });
		                case "cat":
		                case "echo":
		                const fileName = fullPath[0];
		                done(userInput);
		                fs.readFile(fileName, (err, data) => {

		        "cat": function(fullPath) {
		        "echo": function(userInput) {
		        }
		        }
		        },
		        const command = userInputArray[0];
		        const userInputArray = userInput.split(" ");
		        process.stdout.write('\nprompt > ');
		        process.stdout.write(output);
		        switch (command) {



		}
		}
		};
		const commandLibrary = {
		const fs = require("fs");
		function done(output) {
		function evaluateCmd(userInput) {
		module.exports.commandLibrary = commandLibrary;
		module.exports.evaluateCmd = evaluateCmd;


   b) `wc` prints the line, word, and character counts for a file.

             $ wc commands.js
              42  73 795 commands.js

 
   c) `uniq` sorts each line in a file and only returns different lines, removing any duplicate lines.

              $ uniq commands.js
		const fs = require("fs");

		function done(output) {
		        process.stdout.write(output);
		        process.stdout.write('\nprompt > ');
		}

		function evaluateCmd(userInput) {

		        const userInputArray = userInput.split(" ");
		        const command = userInputArray[0];

		        switch (command) {
		                case "echo":

		                        commandLibrary.echo(userInputArray.slice(1).join(" "));
		                        break;

		                case "cat":
		                        commandLibrary.cat(userInputArray.slice(1));
		                        break;
		        }
		}

		const commandLibrary = {

		        "echo": function(userInput) {
		                done(userInput);
		        },

		        "cat": function(fullPath) {
		                const fileName = fullPath[0];
		                fs.readFile(fileName, (err, data) => {
		                        if (err) throw err;
		                        done(data);
		                });
		        }
		};

		module.exports.commandLibrary = commandLibrary;
		module.exports.evaluateCmd = evaluateCmd;


2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

   A:       $ sort bash.js | wc
	       11      16     215

	    The bash.js file is sorted alphabetically by line then `wc` prints the line count, word count, and character count of the sorted file.

6. Given a string, reverse the order of characters in each word within a sentence while maintaining the original word order and whitespace and return the string. 

   A:	   function reverseString(inputString) {
              let arr = inputString.split(' ');
              let reversedArr= [];

	      arr.forEach((currentChar) => {
                    let reversedChar = currentChar.split('').reverse().join('');
		    reversedArr.push(reversedChar);
	      })
 	      var reversedString = reversedArr.join(' ');
	      console.log(reversedString);
                
           }

	   reverseString("I love Bloc!");